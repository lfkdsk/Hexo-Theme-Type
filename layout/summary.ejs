<script src="js/sql-wasm.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        -webkit-font-smoothing: antialiased;
    }

    html {
        scroll-behavior: smooth;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text', system-ui;
        background: #000;
        color: #fff;
        line-height: 1.5;
        overflow-x: hidden;
    }

    .section {
        min-height: 100vh;
        padding: 80px 20px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: relative;
    }

    .hero {
        background: linear-gradient(180deg, #000 0%, #1a1a1a 100%);
        text-align: center;
    }

    h1 {
        font-size: clamp(2.5rem, 8vw, 6rem);
        font-weight: 700;
        text-align: center;
        margin-bottom: 1rem;
        line-height: 1.1;
        background: linear-gradient(180deg, #fff, rgba(255, 255, 255, 0.8));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        filter: none;
    }

    .stat-number {
        font-size: clamp(4rem, 15vw, 12rem);
        font-weight: 700;
        background: linear-gradient(90deg, #007AFF, #FF2D55);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        line-height: 1;
        margin: 2rem 0;
        opacity: 0;
        transform: translateY(30px);
        transition: opacity 0.8s ease, transform 0.8s cubic-bezier(0.16, 1, 0.3, 1);
    }

    .stat-number.visible {
        opacity: 1;
        transform: translateY(0);
    }

    .subtitle {
        font-size: clamp(1.5rem, 4vw, 2.5rem);
        opacity: 0.8;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        max-width: 1400px;
        width: 100%;
        margin: 40px auto;
        padding: 0 20px;
    }

    .stat-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 20px;
        padding: 30px;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
    }

    .stat-card.visible {
        opacity: 1;
        transform: translateY(0);
    }

    .stat-title {
        font-size: 1.2rem;
        margin-bottom: 20px;
        color: rgba(255, 255, 255, 0.9);
    }

    .chart-container {
        width: 100%;
        height: 300px;
        margin: 20px 0;
    }

    .stat-list {
        list-style: none;
    }

    .stat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        background: rgba(255, 255, 255, 0.05);
        margin-bottom: 8px;
        border-radius: 8px;
    }

    .stat-label {
        color: rgba(255, 255, 255, 0.8);
        max-width: 200px;
    }

    .stat-value {
        color: #007AFF;
        font-weight: 500;
    }

    .scroll-indicator {
        position: absolute;
        bottom: 40px;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0.6;
        transition: opacity 0.3s ease;
    }

    .scroll-indicator::after {
        content: '';
        display: block;
        width: 2px;
        height: 60px;
        background: linear-gradient(180deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0) 100%);
        animation: scrollIndicator 2s cubic-bezier(0.76, 0, 0.24, 1) infinite;
    }

    @keyframes scrollIndicator {
        0% {
            transform: scaleY(0);
            transform-origin: top;
        }

        50% {
            transform: scaleY(1);
            transform-origin: top;
        }

        50.1% {
            transform-origin: bottom;
        }

        100% {
            transform: scaleY(0);
            transform-origin: bottom;
        }
    }

    .progress-bar {
        position: fixed;
        top: 0;
        left: 0;
        height: 2px;
        background: linear-gradient(90deg, #007AFF, #FF2D55);
        z-index: 1000;
    }

    @media (max-width: 768px) {
        .section {
            padding: 0;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .chart-container {
            height: 250px;
        }

        .stats-grid {
            display: grid;
        }

        .photo-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        }
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .photo-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 20px;
        margin-top: 24px;
    }

    .photo-item {
        position: relative;
        border-radius: 16px;
        overflow: hidden;
        aspect-ratio: 4/3;
        transform: translateY(0);
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        background: rgba(255, 255, 255, 0.05);
    }

    .photo-item:hover {
        transform: translateY(-8px);
    }

    .photo-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .photo-info {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 20px;
        background: linear-gradient(0deg, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0) 100%);
        color: #fff;
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
    }

    .photo-month {
        font-size: 24px;
        font-weight: 600;
    }

    .photo-date {
        font-size: 14px;
        opacity: 0.8;
    }

    .photo-wall-section {
        width: 100vw;
        min-height: 100vh;
        position: relative;
        left: 0;
        padding: 40px 0;
    }

    .photo-wall-container {
        max-width: 1400px;
        border-radius: 20px;
        padding: 30px;
        background-color: rgba(255, 255, 255, 0.05);
        margin: 0 auto;
    }

    .photo-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 24px;
        padding: 20px;
    }

    @media (max-width: 768px) {
        .photo-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<section class="pjax-area">
    <div class="progress-bar" id="progressBar"></div>

    <!-- 主页面 -->
    <section class="section hero">
        <h1 id="title"> 年度回顾</h1>
        <div class="stat-number" id="photoCount">1,288</div>
        <p class="subtitle">张照片，记录生活的每一刻</p>
        <div class="scroll-indicator"></div>
    </section>

    <!-- 参数统计 -->
    <section class="section" id="container">
        <div class="stats-grid">
            <!-- 相机统计 -->
            <div class="stat-card">
                <h2 class="stat-title">相机分布</h2>
                <div class="chart-container">
                    <canvas id="cameraChart"></canvas>
                </div>
            </div>

            <!-- 镜头统计 -->
            <div class="stat-card" id="lens">
                <h2 class="stat-title">常用镜头</h2>
            </div>

            <!-- 光圈分布 -->
            <div class="stat-card">
                <h2 class="stat-title">光圈分布</h2>
                <div class="chart-container">
                    <canvas id="apertureChart"></canvas>
                </div>
            </div>

            <!-- 拍摄地点 -->
            <div class="stat-card" id="location">
                <h2 class="stat-title">拍摄地点</h2>
            </div>
        </div>
    </section>
</section>

<script type="module">
    // 设置全局Chart.js配置
    Chart.defaults.color = '#fff';
    Chart.defaults.borderColor = 'rgba(255, 255, 255, 0.1)';
    Chart.defaults.plugins.tooltip.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    Chart.defaults.plugins.legend.labels.color = '#fff';

    const SQL = await initSqlJs({
        locateFile: file => `<%- config.root %>js/sql-wasm.wasm`
    });
    const sqlite = await fetch('sqlite.db');
    const sqlite_buf = await sqlite.arrayBuffer();
    const db = new SQL.Database(new Uint8Array(sqlite_buf));
    const year = getParam("year")
    const sql =
        `SELECT json_object(
    'count', (
        SELECT COUNT(*) 
        FROM photo p
        JOIN EXIFData e ON p.exif_data_id = e.id
        WHERE strftime('%Y', e.date) = CAST(:year AS TEXT)
    ),
    'year', :year,
    'F', (
        SELECT json_group_array(json_array('f/' || f_number, count))
        FROM (
            SELECT e.f_number, COUNT(*) as count
            FROM photo p
            JOIN EXIFData e ON p.exif_data_id = e.id
            WHERE strftime('%Y', e.date) = CAST(:year AS TEXT)
            GROUP BY e.f_number
            ORDER BY count DESC
        )
    ),
    'maker', (
        SELECT json_group_array(json_array(maker, count))
        FROM (
            SELECT e.maker, COUNT(*) as count
            FROM photo p
            JOIN EXIFData e ON p.exif_data_id = e.id
            WHERE strftime('%Y', e.date) = CAST(:year AS TEXT)
            GROUP BY e.maker
            ORDER BY count DESC
        )
    ),
    'lens', (
        SELECT json_group_array(
            json_object(
                'name', lens_model,
                'count', count
            )
        )
        FROM (
            SELECT e.lens_model, COUNT(*) as count
            FROM photo p
            JOIN EXIFData e ON p.exif_data_id = e.id
            WHERE strftime('%Y', e.date) = CAST(:year AS TEXT)
            GROUP BY e.lens_model
            ORDER BY count DESC
            LIMIT 5
        )
    ),
    'locations', (
        SELECT json_group_array(
            json_object(
                'name', country,
                'count', count
            )
        )
        FROM (
            SELECT l.country, COUNT(*) as count
            FROM photo p
            JOIN location l ON p.location_id = l.id
            JOIN EXIFData e ON p.exif_data_id = e.id
            WHERE strftime('%Y', e.date) = CAST(:year AS TEXT)
                AND l.country IS NOT NULL AND l.country != ""
            GROUP BY l.country
            ORDER BY count DESC
        )
    ),
    'photos', (
        WITH monthly_photos AS (
            SELECT 
                strftime('%m', e.date) as month,
                strftime('%Y-%m-%d', e.date) as date,
                p.path,
                ROW_NUMBER() OVER (PARTITION BY strftime('%m', e.date) ORDER BY RANDOM()) as rn
            FROM photo p
            JOIN exifdata e ON p.exif_data_id = e.id
            WHERE strftime('%Y', e.date) = CAST(:year AS TEXT)
        )
        SELECT json_group_array(
            json_object(
                'month', CAST(month AS INTEGER),
                'date', date,
                'url', (:thum || path)
            )
        )
        FROM monthly_photos
        WHERE rn = 1
        ORDER BY month
    )
) as data;    
`.replaceAll(":year", year)
 .replaceAll(":thum", '"<%- config.thumbnail_url %>"');
    console.log(sql)
    var data = db.exec(sql);
    const DATA = JSON.parse(data[0].values[0][0])
    const title = document.getElementById("title")
    console.log(DATA)
    title.textContent = DATA.year + title.textContent

    // 进度条
    function updateProgressBar() {
        const winScroll = document.documentElement.scrollTop;
        const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const scrolled = (winScroll / height) * 100;
        document.getElementById('progressBar').style.width = scrolled + '%';
    }

    // 数字动画
    function animateNumber(element, target) {
        let start = 0;
        const duration = 2000;
        const startTime = performance.now();

        function update(currentTime) {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);

            const current = Math.floor(progress * target);
            element.textContent = current.toLocaleString();

            if (progress < 1) {
                requestAnimationFrame(update);
            }
        }

        requestAnimationFrame(update);
    }

    function generatePastelColor() {
        // 使用较大范围的色相以获得更多变化
        const hue = Math.floor(Math.random() * 360);
        // 使用较低的饱和度 (30-50%)
        const saturation = 30 + Math.random() * 20;
        // 使用较高的亮度 (60-80%)，确保颜色柔和
        const lightness = 60 + Math.random() * 20;
        return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
    }


    // 观察元素可见性
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                if (entry.target.id === 'photoCount' && !entry.target.dataset.animated) {
                    entry.target.dataset.animated = true;
                    animateNumber(entry.target, DATA.count);
                }
            }
        });
    }, {
        threshold: 0.1
    });

    async function init() {
        // 初始化观察者
        const animatedElements = document.querySelectorAll('.stat-number, .stat-card');
        animatedElements.forEach(el => observer.observe(el));

        // 监听滚动
        window.addEventListener('scroll', updateProgressBar);

        // 初始化图表
        new Chart(document.getElementById('cameraChart'), {
            type: 'doughnut',
            data: {
                labels: DATA.maker.map(([maker]) => maker),
                datasets: [{
                    data: DATA.maker.map(([_, count]) => count),
                    backgroundColor: DATA.maker.map(([maker]) => generatePastelColor()),
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            font: {
                                family: '-apple-system'
                            }
                        }
                    }
                }
            }
        });

        function renderStats(lensData) {
            const lens = document.createElement('ul');
            lens.className = 'stat-list';

            // 镜头使用数据的 HTML 结构
            lens.innerHTML = `
      ${lensData.map(item => `
        <li class="stat-item">
          <span class="stat-label">${item.name}</span>
          <span class="stat-value">${item.count}张</span>
        </li>
      `).join('')}
  `;

            return lens;
        }

        const lens = document.getElementById("lens")
        lens.appendChild(renderStats(DATA.lens))
        const location = document.getElementById("location")
        location.appendChild(renderStats(DATA.locations))

        new Chart(document.getElementById('apertureChart'), {
            type: 'bar',
            data: {
                labels: DATA.F.map(([f]) => f),
                datasets: [{
                    label: '使用次数',
                    data: DATA.F.map(([_, count]) => count),
                    backgroundColor: '#007AFF',
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });

        function renderMonthlyPhotos(container, data) {
            const card = document.createElement('section');
            card.className = 'photo-wall-section';
            card.innerHTML = `
    <div class="photo-wall-container">
    <h2 class="stat-title">每月印象</h2>
    <div class="photo-grid">
      ${data.photos.map(photo => `
        <div class="photo-item">
          <img src="${photo.url.replace(/\.\w+$/, '.webp')}" alt="${photo.month}月印象" loading="lazy">
          <div class="photo-info">
            <span class="photo-month">${photo.month}月</span>
            <span class="photo-date">${photo.date}</span>
          </div>
        </div>
      `).join('')}
    </div>
    </div>
  `;
            card.opacity = 1
            container.appendChild(card);
            return card;
        }

        renderMonthlyPhotos(document.getElementById("container"), DATA)
    }

    init()
</script>